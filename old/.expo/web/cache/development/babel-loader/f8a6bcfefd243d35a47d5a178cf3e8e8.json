{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/Users/minje/Desktop/DeadLine-client/src/containers/home/TeamJoinScreen.js\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState } from \"react\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { set_teamlist } from \"../../redux/actions/TeamAction\";\nimport * as api from \"../../api/Api\";\nimport ActionModal from \"../../components/Modal\";\nimport { modalstyles } from \"../../styles/light/styles\";\nexport default function TeamJoinScreen(_ref) {\n  var _this = this;\n\n  var navigation = _ref.navigation;\n\n  var _useSelector = useSelector(function (state) {\n    return state.AuthReducer;\n  }),\n      token = _useSelector.token;\n\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      teamUid = _useState2[0],\n      setTeamUid = _useState2[1];\n\n  var dispatch = useDispatch();\n\n  var setTeamList = function setTeamList() {\n    dispatch(set_teamlist(token));\n  };\n\n  var jointeam = function jointeam() {\n    if (!teamUid) Alert.alert(\"\", \"UID를 입력해주세요!\");else {\n      Alert.alert(\"팀 가입\", \"팀에 가입하시겠습니까?\", [{\n        text: \"취소\",\n        style: \"cancel\"\n      }, {\n        text: \"확인\",\n        onPress: function onPress() {\n          var result;\n          return _regeneratorRuntime.async(function onPress$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  _context.prev = 0;\n                  _context.next = 3;\n                  return _regeneratorRuntime.awrap(api.join_team(token, teamUid, 2));\n\n                case 3:\n                  result = _context.sent;\n                  Alert.alert(\"\", result.data.message, [{\n                    test: \"확인\",\n                    onPress: function onPress() {\n                      setTeamList();\n                      navigation.goBack();\n                    }\n                  }]);\n                  _context.next = 10;\n                  break;\n\n                case 7:\n                  _context.prev = 7;\n                  _context.t0 = _context[\"catch\"](0);\n\n                  if (_context.t0.response) {\n                    if (_context.t0.response.status === 404) {\n                      Alert.alert(\"\", _context.t0.response.data.message, [{\n                        text: \"확인\"\n                      }]);\n                    } else {\n                      Alert.alert(\"알수없는 에러!\", _context.t0.response.data, [{\n                        text: \"확인\"\n                      }]);\n                    }\n                  } else if (_context.t0.request) {\n                    Alert.alert(\"\", \"통신을 실패하였습니다.\");\n                  } else {\n                    console.log(\"Error\", _context.t0.message);\n                  }\n\n                case 10:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, null, null, [[0, 7]], Promise);\n        }\n      }]);\n    }\n  };\n\n  return React.createElement(ActionModal, {\n    width: 340,\n    height: 220,\n    mainMessage: \"\\uD300 UID\\uB97C \\uC785\\uB825\\uD574\\uC8FC\\uC138\\uC694.\",\n    exmessage: function exmessage() {\n      return React.createElement(Text, {\n        style: modalstyles.exMessage,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 9\n        }\n      }, \"\\uD300 UID\\uB294 \\uC601\\uBB38, \\uC22B\\uC790 \\uD63C\\uD569\\uD558\\uC5EC 6\\uC790\\uB9AC\\uC785\\uB2C8\\uB2E4.\");\n    },\n    body: function body() {\n      return React.createElement(TextInput, {\n        style: [modalstyles.TextInput, modalstyles.defaultFont],\n        textAlign: \"center\",\n        placeholder: \"\\uD300 UID \\uC785\\uB825\",\n        onChangeText: function onChangeText(Text) {\n          return setTeamUid(Text);\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 9\n        }\n      });\n    },\n    foot: function foot() {\n      return React.createElement(React.Fragment, null, React.createElement(TouchableOpacity, {\n        style: [modalstyles.footButton, modalstyles.cancleButton],\n        onPress: function onPress() {\n          return navigation.goBack();\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 11\n        }\n      }, React.createElement(Text, {\n        style: modalstyles.cancleText,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 13\n        }\n      }, \"\\uCDE8\\uC18C\")), React.createElement(TouchableOpacity, {\n        style: [modalstyles.footButton, modalstyles.confirmButton],\n        onPress: function onPress() {\n          return jointeam();\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 11\n        }\n      }, React.createElement(Text, {\n        style: modalstyles.confirmText,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 13\n        }\n      }, \"\\uAC00\\uC785\")));\n    },\n    flexDirection: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 5\n    }\n  });\n}","map":{"version":3,"sources":["/Users/minje/Desktop/DeadLine-client/src/containers/home/TeamJoinScreen.js"],"names":["React","useState","useSelector","useDispatch","set_teamlist","api","ActionModal","modalstyles","TeamJoinScreen","navigation","state","AuthReducer","token","teamUid","setTeamUid","dispatch","setTeamList","jointeam","Alert","alert","text","style","onPress","join_team","result","data","message","test","goBack","response","status","request","console","log","exMessage","TextInput","defaultFont","Text","footButton","cancleButton","cancleText","confirmButton","confirmText"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { Text, TouchableOpacity, TextInput, Alert } from \"react-native\";\n// 리둑스 훅\nimport { useSelector, useDispatch } from \"react-redux\";\n// 사용할 액션\nimport { set_teamlist } from \"../../redux/actions/TeamAction\";\nimport * as api from \"../../api/Api\";\nimport ActionModal from \"../../components/Modal\";\nimport { modalstyles } from \"../../styles/light/styles\";\n\nexport default function TeamJoinScreen({ navigation }) {\n  const { token } = useSelector((state) => state.AuthReducer);\n  const [teamUid, setTeamUid] = useState(null);\n  const dispatch = useDispatch();\n  const setTeamList = () => {\n    dispatch(set_teamlist(token));\n  };\n  /**\n   * 팀에 가입합니다.\n   *\n   * 1. 상태 코드를 가입신청으로 유저가 팀에 가입합니다.\n   * 2. 팀리스트를 업데이트 합니다.\n   *\n   */\n  const jointeam = () => {\n    if (!teamUid) Alert.alert(\"\", \"UID를 입력해주세요!\");\n    else {\n      Alert.alert(\"팀 가입\", \"팀에 가입하시겠습니까?\", [\n        { text: \"취소\", style: \"cancel\" },\n        {\n          text: \"확인\",\n          onPress: async () => {\n            try {\n              // 1. 상태 코드를 가입신청으로 유저가 팀에 가입합니다.\n              const result = await api.join_team(token, teamUid, 2);\n              Alert.alert(\"\", result.data.message, [\n                {\n                  test: \"확인\",\n                  onPress: () => {\n                    // 2. 팀리스트를 업데이트 합니다.\n                    setTeamList();\n                    navigation.goBack();\n                  },\n                },\n              ]);\n            } catch (error) {\n              if (error.response) {\n                // 요청이 이루어졌으며 서버가 2xx의 범위를 벗어나는 상태 코드로 응답했습니다.\n                if (error.response.status === 404) {\n                  Alert.alert(\"\", error.response.data.message, [\n                    { text: \"확인\" },\n                  ]);\n                } else {\n                  Alert.alert(\"알수없는 에러!\", error.response.data, [\n                    { text: \"확인\" },\n                  ]);\n                }\n              } else if (error.request) {\n                // 요청이 이루어 졌으나 응답을 받지 못했습니다.\n                Alert.alert(\"\", \"통신을 실패하였습니다.\");\n              } else {\n                // 오류를 발생시킨 요청을 설정하는 중에 문제가 발생했습니다.\n                console.log(\"Error\", error.message);\n              }\n            }\n          },\n        },\n      ]);\n    }\n  };\n  return (\n    <ActionModal\n      width={340}\n      height={220}\n      mainMessage=\"팀 UID를 입력해주세요.\"\n      exmessage={() => (\n        <Text style={modalstyles.exMessage}>\n          팀 UID는 영문, 숫자 혼합하여 6자리입니다.\n        </Text>\n      )}\n      body={() => (\n        <TextInput\n          style={[modalstyles.TextInput, modalstyles.defaultFont]}\n          textAlign={\"center\"}\n          placeholder=\"팀 UID 입력\"\n          onChangeText={(Text) => setTeamUid(Text)}\n        ></TextInput>\n      )}\n      foot={() => (\n        <>\n          <TouchableOpacity\n            style={[modalstyles.footButton, modalstyles.cancleButton]}\n            onPress={() => navigation.goBack()}\n          >\n            <Text style={modalstyles.cancleText}>취소</Text>\n          </TouchableOpacity>\n          <TouchableOpacity\n            style={[modalstyles.footButton, modalstyles.confirmButton]}\n            onPress={() => jointeam()}\n          >\n            <Text style={modalstyles.confirmText}>가입</Text>\n          </TouchableOpacity>\n        </>\n      )}\n      flexDirection=\"row\"\n    />\n  );\n}\n"]},"metadata":{},"sourceType":"module"}