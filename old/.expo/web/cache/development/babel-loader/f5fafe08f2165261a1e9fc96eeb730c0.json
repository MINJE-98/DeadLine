{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport * as api from \"../../api/Api\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nvar SET_TEAMLIST = \"SET_TEAMLIST\";\n\nvar set_teamlist = function set_teamlist(token) {\n  return function _callee(dispatch) {\n    var result;\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(api.get_user_teamlist(token));\n\n          case 3:\n            result = _context.sent;\n\n            if (!!result) {\n              console.log(!result);\n              dispatch({\n                type: SET_TEAMLIST,\n                teamlist: result.data.data\n              });\n            }\n\n            _context.next = 10;\n            break;\n\n          case 7:\n            _context.prev = 7;\n            _context.t0 = _context[\"catch\"](0);\n\n            if (_context.t0.response) {\n              console.log(_context.t0.response);\n\n              if (_context.t0.response.status === 404) {\n                Alert.alert(\"404에러\", _context.t0.response.message);\n              } else {\n                Alert.alert(\"40*에러\", _context.t0.response.message);\n              }\n            } else if (_context.t0.request) {\n              Alert.alert(\"통신을 실패\", \"통신 실패하였습니다.\");\n            } else {\n              console.log(\"Error\", _context.t0.message);\n            }\n\n          case 10:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[0, 7]], Promise);\n  };\n};\n\nexport { SET_TEAMLIST, set_teamlist };","map":{"version":3,"sources":["/Users/minje/Desktop/DeadLine-client/src/redux/actions/TeamAction.js"],"names":["api","SET_TEAMLIST","set_teamlist","token","dispatch","get_user_teamlist","result","console","log","type","teamlist","data","response","status","Alert","alert","message","request"],"mappings":";AAAA,OAAO,KAAKA,GAAZ;;AAIA,IAAMC,YAAY,GAAG,cAArB;;AAQA,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAACC,KAAD,EAAW;AAC9B,SAAO,iBAAOC,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CAGkBJ,GAAG,CAACK,iBAAJ,CAAsBF,KAAtB,CAHlB;;AAAA;AAGGG,YAAAA,MAHH;;AAIH,gBAAI,CAAC,CAACA,MAAN,EAAc;AACZC,cAAAA,OAAO,CAACC,GAAR,CAAY,CAACF,MAAb;AAEAF,cAAAA,QAAQ,CAAC;AACPK,gBAAAA,IAAI,EAAER,YADC;AAEPS,gBAAAA,QAAQ,EAAEJ,MAAM,CAACK,IAAP,CAAYA;AAFf,eAAD,CAAR;AAID;;AAXE;AAAA;;AAAA;AAAA;AAAA;;AAaH,gBAAI,YAAMC,QAAV,EAAoB;AAClBL,cAAAA,OAAO,CAACC,GAAR,CAAY,YAAMI,QAAlB;;AAEA,kBAAI,YAAMA,QAAN,CAAeC,MAAf,KAA0B,GAA9B,EAAmC;AACjCC,gBAAAA,KAAK,CAACC,KAAN,CAAY,OAAZ,EAAqB,YAAMH,QAAN,CAAeI,OAApC;AACD,eAFD,MAEO;AACLF,gBAAAA,KAAK,CAACC,KAAN,CAAY,OAAZ,EAAqB,YAAMH,QAAN,CAAeI,OAApC;AACD;AACF,aARD,MAQO,IAAI,YAAMC,OAAV,EAAmB;AAExBH,cAAAA,KAAK,CAACC,KAAN,CAAY,QAAZ,EAAsB,aAAtB;AACD,aAHM,MAGA;AAELR,cAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqB,YAAMQ,OAA3B;AACD;;AA3BE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAP;AA8BD,CA/BD;;AAqCA,SACEf,YADF,EAGEC,YAHF","sourcesContent":["import * as api from \"../../api/Api\";\nimport { Alert } from \"react-native\";\n\n// 엑션 타입입니다.\nconst SET_TEAMLIST = \"SET_TEAMLIST\";\n// const GET_TEAMLIST = 'GET_TEAMLIST'\n// const REFRESH_TEAMLIST = 'REFRESH_TEAMLIST'\n\n/**\n * 유저가 가지고있는 팀리스트를 가져옵니다.\n * 1. 토큰을 통해 유저가 속한 팀리스트를 가져옵니다.\n */\nconst set_teamlist = (token) => {\n  return async (dispatch) => {\n    try {\n      // 1. 토큰을 통해 유저가 속한 팀리스트를 가져옵니다.\n      const result = await api.get_user_teamlist(token);\n      if (!!result) {\n        console.log(!result);\n\n        dispatch({\n          type: SET_TEAMLIST,\n          teamlist: result.data.data,\n        });\n      }\n    } catch (error) {\n      if (error.response) {\n        console.log(error.response);\n        // 요청이 이루어졌으며 서버가 2xx의 범위를 벗어나는 상태 코드로 응답했습니다.\n        if (error.response.status === 404) {\n          Alert.alert(\"404에러\", error.response.message);\n        } else {\n          Alert.alert(\"40*에러\", error.response.message);\n        }\n      } else if (error.request) {\n        // 요청이 이루어 졌으나 응답을 받지 못했습니다.\n        Alert.alert(\"통신을 실패\", \"통신 실패하였습니다.\");\n      } else {\n        // 오류를 발생시킨 요청을 설정하는 중에 문제가 발생했습니다.\n        console.log(\"Error\", error.message);\n      }\n    }\n  };\n};\n// const get_teamlist = () =>({\n//     type: GET_TEAMLIST\n// })\n// const refresh_teamlist () =>\n\nexport {\n  SET_TEAMLIST,\n  // REFRESH_TEAMLIST,\n  set_teamlist,\n  // get_teamlist,\n};\n"]},"metadata":{},"sourceType":"module"}