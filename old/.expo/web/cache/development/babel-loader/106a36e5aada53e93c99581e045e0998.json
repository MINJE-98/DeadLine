{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/Users/minje/Desktop/DeadLine-client/App.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport { Provider } from 'react-redux';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport RootNavigation from \"./src/navigation/RootNavigation\";\nimport { store, persistor } from \"./src/redux/store/Store\";\n\nvar App = function (_Component) {\n  _inherits(App, _Component);\n\n  var _super = _createSuper(App);\n\n  function App() {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _this.renderLoading = function () {\n      return React.createElement(View, {\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 16,\n          columnNumber: 7\n        }\n      }, React.createElement(ActivityIndicator, {\n        size: \"large\",\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 17,\n          columnNumber: 11\n        }\n      }));\n    };\n\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(Provider, {\n        store: store,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 23,\n          columnNumber: 5\n        }\n      }, React.createElement(PersistGate, {\n        loading: this.renderLoading(),\n        persistor: persistor,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 24,\n          columnNumber: 7\n        }\n      }, React.createElement(RootNavigation, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 25,\n          columnNumber: 9\n        }\n      })));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport { App as default };","map":{"version":3,"sources":["/Users/minje/Desktop/DeadLine-client/App.js"],"names":["React","Component","Provider","PersistGate","RootNavigation","store","persistor","App","renderLoading"],"mappings":";;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;;;AAEA,SAASC,QAAT,QAAyB,aAAzB;AACA,SAASC,WAAT,QAA4B,iCAA5B;AACA,OAAOC,cAAP;AACA,SAASC,KAAT,EAAgBC,SAAhB;;IAMqBC,G;;;;;;;;;;;;;;;;UAEnBC,a,GAAgB,YAAM;AACpB,aACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,iBAAD;AAAmB,QAAA,IAAI,EAAE,OAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,CADF;AAKD,K;;;;;;;WACD,kBAAQ;AACN,aACA,oBAAC,QAAD;AAAU,QAAA,KAAK,EAAEH,KAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,WAAD;AAAa,QAAA,OAAO,EAAE,KAAKG,aAAL,EAAtB;AAA4C,QAAA,SAAS,EAAEF,SAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,cAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,CADF,CADA;AAOD;;;;EAjB8BL,S;;SAAZM,G","sourcesContent":["import React, { Component } from 'react';\nimport { View, ActivityIndicator } from 'react-native';\nimport { Provider } from 'react-redux';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport RootNavigation from './src/navigation/RootNavigation';\nimport { store, persistor } from './src/redux/store/Store';\n\n/**\n * app\n */\n\nexport default class App extends Component{\n  // 렌더링전 로딩 컴포넌트\n  renderLoading = () => { \n    return ( \n      <View>               \n          <ActivityIndicator size={\"large\"} /> \n      </View>         \n    );    \n  };\n  render(){\n    return(\n    <Provider store={store}>\n      <PersistGate loading={this.renderLoading()} persistor={persistor}>\n        <RootNavigation />\n      </PersistGate>\n    </Provider>\n  )\n  }\n}\n\n// import React, {useState} from 'react';\n// import {View, Button, Platform} from 'react-native';\n// import DateTimePicker from '@react-native-community/datetimepicker';\n\n// export default function App(){\n//   const [date, setDate] = useState(new Date());\n//   const [mode, setMode] = useState('date');\n//   const [show, setShow] = useState(false);\n\n//   const onChange = (event, selectedDate) => {\n//     const currentDate = selectedDate || date;\n//     setShow(Platform.OS === 'ios');\n//     setDate(currentDate);\n//   };\n\n//   const showMode = (currentMode) => {\n//     setShow(true);\n//     setMode(currentMode);\n//   };\n\n//   const showDatepicker = () => {\n//     showMode('date');\n//   };\n\n//   const showTimepicker = () => {\n//     showMode('time');\n//   };\n\n//   return (\n//     <View>\n//       <View>\n//         <Button onPress={showDatepicker} title=\"Show date picker!\" />\n//       </View>\n//       <View>\n//         <Button onPress={showTimepicker} title=\"Show time picker!\" />\n//       </View>\n//       {console.log(date)}\n//       {show && (\n//         <DateTimePicker\n//           testID=\"dateTimePicker\"\n//           value={date}\n//           mode={mode}\n//           is24Hour={true}\n//           display=\"default\"\n//           onChange={onChange}\n//         />\n//       )}\n//     </View>\n//   );\n// };"]},"metadata":{},"sourceType":"module"}