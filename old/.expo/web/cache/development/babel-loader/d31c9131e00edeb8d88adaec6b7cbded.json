{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/Users/minje/Desktop/DeadLine-client/src/containers/home/TeamMakeScreen.js\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState } from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport { useSelector, useDispatch } from 'react-redux';\nimport { set_teamlist } from \"../../redux/actions/TeamAction\";\nimport * as api from \"../../api/Api\";\nimport ActionModal from \"../../components/Modal\";\nimport { modalstyles } from \"../../styles/light/styles\";\nexport default function MakeTeamScreen(_ref) {\n  var _this = this;\n\n  var navigation = _ref.navigation;\n\n  var _useSelector = useSelector(function (state) {\n    return state.AuthReducer;\n  }),\n      token = _useSelector.token;\n\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      teamName = _useState2[0],\n      setTeamName = _useState2[1];\n\n  var dispatch = useDispatch();\n\n  var setTeamList = function setTeamList() {\n    dispatch(set_teamlist(token));\n  };\n\n  var teamUID = function teamUID() {\n    var firstPart = Math.random() * 46656 | 0;\n    var secondPart = Math.random() * 46656 | 0;\n    firstPart = (\"000\" + firstPart.toString(36)).slice(-3);\n    secondPart = (\"000\" + secondPart.toString(36)).slice(-3);\n    return firstPart + secondPart;\n  };\n\n  var maketeam = function maketeam() {\n    if (!teamName || teamName.length > 11) Alert.alert(\"\", \"팀 이름을 확인해주세요.\");else {\n      Alert.alert(\"팀 생성\", \"팀을 생성하시겠습니까?\", [{\n        text: \"취소\",\n        style: \"cancel\"\n      }, {\n        text: \"확인\",\n        onPress: function onPress() {\n          var teamuid, result;\n          return _regeneratorRuntime.async(function onPress$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  _context.prev = 0;\n                  teamuid = teamUID();\n                  _context.next = 4;\n                  return _regeneratorRuntime.awrap(api.set_team(token, teamuid, teamName));\n\n                case 4:\n                  result = _context.sent;\n\n                  if (!(result.status == 200)) {\n                    _context.next = 9;\n                    break;\n                  }\n\n                  _context.next = 8;\n                  return _regeneratorRuntime.awrap(api.join_team(token, teamuid, 0));\n\n                case 8:\n                  Alert.alert(\"\", result.data.message, [{\n                    test: \"확인\",\n                    onPress: function onPress() {\n                      setTeamList();\n                      navigation.goBack();\n                    }\n                  }]);\n\n                case 9:\n                  _context.next = 14;\n                  break;\n\n                case 11:\n                  _context.prev = 11;\n                  _context.t0 = _context[\"catch\"](0);\n\n                  if (_context.t0.response) {\n                    if (_context.t0.response.status === 404) {\n                      Alert.alert(\"\", _context.t0.response.data.message, [{\n                        text: \"확인\"\n                      }]);\n                    } else {\n                      Alert.alert(\"알수없는 에러!\", _context.t0.response.data, [{\n                        text: \"확인\"\n                      }]);\n                    }\n                  } else if (_context.t0.request) {\n                    Alert.alert(\"\", \"통신을 실패하였습니다.\");\n                  } else {\n                    console.log('Error', _context.t0.message);\n                  }\n\n                case 14:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, null, null, [[0, 11]], Promise);\n        }\n      }]);\n    }\n  };\n\n  return React.createElement(ActionModal, {\n    width: 340,\n    height: 220,\n    mainMessage: \"\\uD300 \\uC774\\uB984\\uC744 \\uC785\\uB825\\uD574\\uC8FC\\uC138\\uC694!\",\n    exmessage: function exmessage() {\n      return React.createElement(Text, {\n        style: modalstyles.exMessage,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 17\n        }\n      }, \"\\uD300 \\uC774\\uB984\\uC740 \\uCD5C\\uB300 10\\uC790\\uAE4C\\uC9C0 \\uC785\\uB825 \\uAC00\\uB2A5\\uD569\\uB2C8\\uB2E4.\");\n    },\n    body: function body() {\n      return React.createElement(TextInput, {\n        style: [modalstyles.TextInput, modalstyles.defaultFont],\n        textAlign: 'center',\n        placeholder: \"\\uD300 \\uC774\\uB984 \\uC785\\uB825\",\n        onChangeText: function onChangeText(Text) {\n          return setTeamName(Text);\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 17\n        }\n      });\n    },\n    foot: function foot() {\n      return React.createElement(React.Fragment, null, React.createElement(TouchableOpacity, {\n        style: [modalstyles.footButton, modalstyles.cancleButton],\n        onPress: function onPress() {\n          return navigation.goBack();\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 21\n        }\n      }, React.createElement(Text, {\n        style: modalstyles.cancleText,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 25\n        }\n      }, \"\\uCDE8\\uC18C\")), React.createElement(TouchableOpacity, {\n        style: [modalstyles.footButton, modalstyles.confirmButton],\n        onPress: function onPress() {\n          return maketeam();\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 21\n        }\n      }, React.createElement(Text, {\n        style: modalstyles.confirmText,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 25\n        }\n      }, \"\\uC0DD\\uC131\")));\n    },\n    flexDirection: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 9\n    }\n  });\n}","map":{"version":3,"sources":["/Users/minje/Desktop/DeadLine-client/src/containers/home/TeamMakeScreen.js"],"names":["React","useState","useSelector","useDispatch","set_teamlist","api","ActionModal","modalstyles","MakeTeamScreen","navigation","state","AuthReducer","token","teamName","setTeamName","dispatch","setTeamList","teamUID","firstPart","Math","random","secondPart","toString","slice","maketeam","length","Alert","alert","text","style","onPress","teamuid","set_team","result","status","join_team","data","message","test","goBack","response","request","console","log","exMessage","TextInput","defaultFont","Text","footButton","cancleButton","cancleText","confirmButton","confirmText"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { Text, TouchableOpacity, TextInput, Alert } from 'react-native';\n// 리둑스 훅\nimport { useSelector, useDispatch } from 'react-redux';\n// 사용할 액션\nimport { set_teamlist } from '../../redux/actions/TeamAction';\nimport * as api from '../../api/Api';\nimport ActionModal from '../../components/Modal';\nimport { modalstyles } from '../../styles/light/styles'\n\nexport default function MakeTeamScreen({ navigation }){\n    const { token } = useSelector( state => state.AuthReducer)\n    const [teamName, setTeamName] = useState(null);\n    const dispatch = useDispatch();\n    const setTeamList = () => {dispatch(set_teamlist(token))}\n    // 무작위 teamUID를 생성합니다.\n    const teamUID = () => {\n        var firstPart = (Math.random() * 46656) | 0;\n        var secondPart = (Math.random() * 46656) | 0;\n        firstPart = (\"000\" + firstPart.toString(36)).slice(-3);\n        secondPart = (\"000\" + secondPart.toString(36)).slice(-3);\n        return firstPart + secondPart;\n    }\n  \n  /**\n   * 팀을 생성합니다.\n   * \n   * 1. 유저로 부터 팀이름을 받고, 조건에 맞는 팀이름인지 확인합니다.\n   * 2. 팀을 생성합니다.\n   * 3. 생성한 팀에 관리자 권한으로 가입합니다.\n   */\n    const maketeam = ( ) =>{\n        // 1. 유저로 부터 팀이름을 받고, 조건에 맞는 팀이름인지 확인합니다.\n        // 길이 10자 이내\n        if(!teamName || teamName.length > 11 ) Alert.alert(\"\",\"팀 이름을 확인해주세요.\")\n        else{\n          Alert.alert(\"팀 생성\",\"팀을 생성하시겠습니까?\", [{text:\"취소\", style: \"cancel\"},{text:\"확인\", onPress: \n          async() =>{\n            try {\n              const teamuid = teamUID();\n              // 2. 팀을 생성합니다.\n              const result = await api.set_team(token, teamuid, teamName);\n              // 팀생성에 성공하였을떄.\n              if(result.status == 200){\n                // 3. 생성한 팀에 관리자 권한으로 가입합니다.\n                await api.join_team(token, teamuid, 0);\n                Alert.alert(\"\", result.data.message, [{test: \"확인\", onPress: () =>{\n                    setTeamList()\n                    navigation.goBack()\n                }}])\n              }\n            } catch (error) {\n              if (error.response) {\n                  // 요청이 이루어졌으며 서버가 2xx의 범위를 벗어나는 상태 코드로 응답했습니다.\n                  if (error.response.status === 404) {\n                    Alert.alert(\"\", error.response.data.message, [{text: \"확인\"}]);\n                    } \n                  else {\n                    Alert.alert(\"알수없는 에러!\", error.response.data, [{text: \"확인\"}]);\n                  }\n                }\n                else if (error.request) {\n                  // 요청이 이루어 졌으나 응답을 받지 못했습니다.\n                  Alert.alert(\"\",\"통신을 실패하였습니다.\")\n              }\n                else {\n                  // 오류를 발생시킨 요청을 설정하는 중에 문제가 발생했습니다.\n                  console.log('Error', error.message);\n                }\n              }\n          }}]);\n        }\n  }\n    return(\n        <ActionModal \n            width={340}\n            height={220}\n            mainMessage='팀 이름을 입력해주세요!'\n            exmessage={()=>(\n                <Text style={modalstyles.exMessage}>팀 이름은 최대 10자까지 입력 가능합니다.</Text>\n            )}\n            body={()=> (\n                <TextInput style={[modalstyles.TextInput, modalstyles.defaultFont]} textAlign={'center'} placeholder=\"팀 이름 입력\" onChangeText={Text => setTeamName(Text)}></TextInput>\n            )}\n            foot={()=> (\n                <>\n                    <TouchableOpacity style={[modalstyles.footButton, modalstyles.cancleButton]} onPress={()=> navigation.goBack()}>\n                        <Text style={modalstyles.cancleText}>취소</Text>\n                    </TouchableOpacity>\n                    <TouchableOpacity style={[modalstyles.footButton, modalstyles.confirmButton]} onPress={()=> maketeam()}>\n                        <Text style={modalstyles.confirmText}>생성</Text>\n                    </TouchableOpacity>\n                </>\n            )}\n            flexDirection='row'\n        />\n    )\n}"]},"metadata":{},"sourceType":"module"}