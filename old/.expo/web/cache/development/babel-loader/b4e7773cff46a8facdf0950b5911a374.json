{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/Users/minje/Desktop/DeadLine-client/src/navigation/loading/LoadingNavigator.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport { createStackNavigator } from '@react-navigation/stack';\nimport LoadingScreen from \"../../containers/loading/LoadingScreen\";\nvar Stack = createStackNavigator();\n\nvar ScanModal = function (_Component) {\n  _inherits(ScanModal, _Component);\n\n  var _super = _createSuper(ScanModal);\n\n  function ScanModal(props) {\n    _classCallCheck(this, ScanModal);\n\n    return _super.call(this, props);\n  }\n\n  _createClass(ScanModal, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(Stack.Navigator, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 20,\n          columnNumber: 13\n        }\n      }, React.createElement(Stack.Screen, {\n        name: \"loading\",\n        component: LoadingScreen,\n        options: {\n          headerShown: false,\n          cardStyle: {\n            backgroundColor: 'transparent'\n          },\n          cardOverlayEnabled: true,\n          cardStyleInterpolator: function cardStyleInterpolator(_ref) {\n            var progress = _ref.current.progress;\n            return {\n              cardStyle: {\n                opacity: progress.interpolate({\n                  inputRange: [0, 0.5, 0.9, 1],\n                  outputRange: [0, 0.25, 0.7, 1]\n                })\n              },\n              overlayStyle: {\n                opacity: progress.interpolate({\n                  inputRange: [0, 1],\n                  outputRange: [0, 0.5],\n                  extrapolate: 'identity'\n                })\n              }\n            };\n          }\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 21,\n          columnNumber: 17\n        }\n      }));\n    }\n  }]);\n\n  return ScanModal;\n}(Component);\n\nexport { ScanModal as default };","map":{"version":3,"sources":["/Users/minje/Desktop/DeadLine-client/src/navigation/loading/LoadingNavigator.js"],"names":["React","Component","createStackNavigator","LoadingScreen","Stack","ScanModal","props","headerShown","cardStyle","backgroundColor","cardOverlayEnabled","cardStyleInterpolator","progress","current","opacity","interpolate","inputRange","outputRange","overlayStyle","extrapolate"],"mappings":";;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,oBAAT,QAAqC,yBAArC;AAMA,OAAOC,aAAP;AAEA,IAAMC,KAAK,GAAGF,oBAAoB,EAAlC;;IACqBG,S;;;;;AAGnB,qBAAYC,KAAZ,EAAkB;AAAA;;AAAA,6BACNA,KADM;AAGf;;;;WACD,kBAAQ;AACJ,aACI,oBAAC,KAAD,CAAO,SAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,KAAD,CAAO,MAAP;AAAc,QAAA,IAAI,EAAC,SAAnB;AAA6B,QAAA,SAAS,EAAEH,aAAxC;AAAuD,QAAA,OAAO,EAAE;AAC5DI,UAAAA,WAAW,EAAE,KAD+C;AAE5DC,UAAAA,SAAS,EAAE;AAAEC,YAAAA,eAAe,EAAE;AAAnB,WAFiD;AAG5DC,UAAAA,kBAAkB,EAAE,IAHwC;AAI5DC,UAAAA,qBAAqB,EAAE;AAAA,gBAAcC,QAAd,QAAGC,OAAH,CAAcD,QAAd;AAAA,mBAAgC;AACnDJ,cAAAA,SAAS,EAAE;AACXM,gBAAAA,OAAO,EAAEF,QAAQ,CAACG,WAAT,CAAqB;AAC1BC,kBAAAA,UAAU,EAAE,CAAC,CAAD,EAAI,GAAJ,EAAS,GAAT,EAAc,CAAd,CADc;AAE1BC,kBAAAA,WAAW,EAAE,CAAC,CAAD,EAAI,IAAJ,EAAU,GAAV,EAAe,CAAf;AAFa,iBAArB;AADE,eADwC;AAOnDC,cAAAA,YAAY,EAAE;AACdJ,gBAAAA,OAAO,EAAEF,QAAQ,CAACG,WAAT,CAAqB;AAC1BC,kBAAAA,UAAU,EAAE,CAAC,CAAD,EAAI,CAAJ,CADc;AAE1BC,kBAAAA,WAAW,EAAE,CAAC,CAAD,EAAI,GAAJ,CAFa;AAG1BE,kBAAAA,WAAW,EAAE;AAHa,iBAArB;AADK;AAPqC,aAAhC;AAAA;AAJqC,SAAhE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,CADJ;AAwBH;;;;EAhCkClB,S;;SAAlBI,S","sourcesContent":["import React, { Component } from 'react';\nimport { createStackNavigator } from '@react-navigation/stack';\n// import { View, TouchableOpacity, Text } from 'react-native';\n// import MaterialIcons from 'react-native-vector-icons/MaterialIcons';\n\n// import { Context } from '../src/context/conext';\n\nimport LoadingScreen from '../../containers/loading/LoadingScreen';\n\nconst Stack = createStackNavigator();\nexport default class ScanModal extends Component {\n//  static contextType = Context\n  \n  constructor(props){\n        super(props);\n        \n    }\n    render(){\n        return(\n            <Stack.Navigator>\n                <Stack.Screen name=\"loading\" component={LoadingScreen} options={{ \n                    headerShown: false,\n                    cardStyle: { backgroundColor: 'transparent' },\n                    cardOverlayEnabled: true,\n                    cardStyleInterpolator: ({ current: { progress } }) => ({\n                        cardStyle: {\n                        opacity: progress.interpolate({\n                            inputRange: [0, 0.5, 0.9, 1],\n                            outputRange: [0, 0.25, 0.7, 1],\n                        }),\n                        },\n                        overlayStyle: {\n                        opacity: progress.interpolate({\n                            inputRange: [0, 1],\n                            outputRange: [0, 0.5],\n                            extrapolate: 'identity',\n                        }),\n                        },\n                    }),\n                }}/>\n            </Stack.Navigator>\n        )\n    }\n}\n"]},"metadata":{},"sourceType":"module"}