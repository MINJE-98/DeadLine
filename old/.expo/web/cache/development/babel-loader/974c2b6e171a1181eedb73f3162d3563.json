{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/Users/minje/Desktop/DeadLine/screen/ScanScreen.js\";\nimport React, { useState, useEffect } from 'react';\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport StatusBar from \"react-native-web/dist/exports/StatusBar\";\nimport Modal from \"react-native-web/dist/exports/Modal\";\nimport TouchableHighlight from \"react-native-web/dist/exports/TouchableHighlight\";\nimport { BarCodeScanner } from 'expo-barcode-scanner';\nimport Icon from \"@expo/vector-icons/Ionicons\";\n\nvar cheerio = require('react-native-cheerio');\n\nfunction ScanScreen(_ref) {\n  var navigation = _ref.navigation;\n\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      hasPermission = _useState2[0],\n      setHasPermission = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      scanned = _useState4[0],\n      setScanned = _useState4[1];\n\n  function crawling(data) {\n    var url, response, htmlString, $, productTit, imageUrl;\n    return _regeneratorRuntime.async(function crawling$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            url = \"http://www.koreannet.or.kr/home/hpisSrchGtin.gs1?gtin=\" + data;\n            _context.prev = 1;\n            _context.next = 4;\n            return _regeneratorRuntime.awrap(fetch(url));\n\n          case 4:\n            response = _context.sent;\n            _context.next = 7;\n            return _regeneratorRuntime.awrap(response.text());\n\n          case 7:\n            htmlString = _context.sent;\n            $ = cheerio.load(htmlString);\n            productTit = $('.productTit').text();\n            imageUrl = $('img#detailImage').attr('src');\n            navigation.navigate('상품 추가', {\n              prodTit: productTit.replace(/\\s/g, '').replace(data, ''),\n              imgUrl: imageUrl,\n              barcode: data\n            });\n            _context.next = 17;\n            break;\n\n          case 14:\n            _context.prev = 14;\n            _context.t0 = _context[\"catch\"](1);\n            alert(_context.t0);\n\n          case 17:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[1, 14]], Promise);\n  }\n\n  useEffect(function () {\n    (function _callee() {\n      var _await$BarCodeScanner, status;\n\n      return _regeneratorRuntime.async(function _callee$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return _regeneratorRuntime.awrap(BarCodeScanner.requestPermissionsAsync());\n\n            case 2:\n              _await$BarCodeScanner = _context2.sent;\n              status = _await$BarCodeScanner.status;\n              setHasPermission(status === 'granted');\n\n            case 5:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    })();\n  }, []);\n\n  var handleBarCodeScanned = function handleBarCodeScanned(_ref2) {\n    var data = _ref2.data;\n    setScanned(true);\n    crawling(data);\n  };\n\n  if (hasPermission === null) {\n    return React.createElement(Text, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 12\n      }\n    }, \"\\uCE74\\uBA54\\uB77C \\uAD8C\\uD55C\\uC774 \\uC5C6\\uC2B5\\uB2C8\\uB2E4.\");\n  }\n\n  if (hasPermission === false) {\n    return React.createElement(Text, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 12\n      }\n    }, \"\\uCE74\\uBA54\\uB77C\\uC5D0 \\uC811\\uADFC\\uD560 \\uC218 \\uC5C6\\uC2B5\\uB2C8\\uB2E4.\");\n  }\n\n  return React.createElement(View, {\n    style: {\n      flex: 1,\n      flexDirection: 'column',\n      justifyContent: 'flex-end'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 5\n    }\n  }, React.createElement(StatusBar, {\n    barStyle: \"light-content\",\n    backgroundColor: \"#000\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }\n  }), React.createElement(BarCodeScanner, {\n    onBarCodeScanned: handleBarCodeScanned,\n    onBarCodeScanned: scanned ? undefined : handleBarCodeScanned,\n    style: styles.Scanner,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }\n  }), React.createElement(View, {\n    style: styles.shape,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }\n  }, React.createElement(Icon, {\n    name: \"ios-qr-scanner\",\n    style: {\n      position: 'absolute',\n      fontSize: 30,\n      color: '#ffd700'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 9\n    }\n  }), React.createElement(Icon, {\n    name: \"ios-barcode\",\n    style: {\n      position: 'absolute',\n      fontSize: 20,\n      color: '#ffd700'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 9\n    }\n  }), React.createElement(View, {\n    style: styles.centeredView,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 9\n    }\n  }), scanned && React.createElement(Button, {\n    title: 'Tap to Scan Again',\n    onPress: function onPress() {\n      return setScanned(false);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 19\n    }\n  })));\n}\n\nexport default ScanScreen;\nvar styles = StyleSheet.create({\n  Scanner: {\n    position: 'absolute',\n    left: 0,\n    right: 0,\n    top: 0,\n    bottom: 0,\n    zIndex: 1\n  },\n  shape: {\n    flex: 1,\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    zIndex: 2\n  },\n  modalText: {\n    marginBottom: 15,\n    textAlign: \"center\"\n  },\n  modalView: {\n    margin: 20,\n    backgroundColor: \"white\",\n    borderRadius: 20,\n    padding: 35,\n    alignItems: \"center\",\n    shadowColor: \"#000\",\n    shadowOffset: {\n      width: 0,\n      height: 2\n    }\n  },\n  centeredView: {\n    flex: 1,\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    marginTop: 22\n  }\n});","map":{"version":3,"sources":["/Users/minje/Desktop/DeadLine/screen/ScanScreen.js"],"names":["React","useState","useEffect","BarCodeScanner","Icon","cheerio","require","ScanScreen","navigation","hasPermission","setHasPermission","scanned","setScanned","crawling","data","url","fetch","response","text","htmlString","$","load","productTit","imageUrl","attr","navigate","prodTit","replace","imgUrl","barcode","alert","requestPermissionsAsync","status","handleBarCodeScanned","flex","flexDirection","justifyContent","undefined","styles","Scanner","shape","position","fontSize","color","centeredView","StyleSheet","create","left","right","top","bottom","zIndex","alignItems","modalText","marginBottom","textAlign","modalView","margin","backgroundColor","borderRadius","padding","shadowColor","shadowOffset","width","height","marginTop"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Alert, Text, View, StyleSheet, Button, StatusBar, Modal, TouchableHighlight } from 'react-native';\nimport { BarCodeScanner } from 'expo-barcode-scanner';\nimport  Icon  from 'react-native-vector-icons/Ionicons';\n// import ListaddScreen from './screen/ListaddScreen';\nconst cheerio = require('react-native-cheerio');\nfunction ScanScreen({ navigation }) {\n  const [hasPermission, setHasPermission] = useState(null);\n  const [scanned, setScanned] = useState(false);\n  // const [modalVisible, setModalVisible] = useState(false);\nasync function crawling(data){\n  const url =`http://www.koreannet.or.kr/home/hpisSrchGtin.gs1?gtin=${data}`\n  try{\n    const response = await fetch(url); // fetch page\n    const htmlString =  await response.text(); // get response text\n    const $ = cheerio.load(htmlString);\n    const productTit = $('.productTit').text();\n    const imageUrl = $('img#detailImage').attr('src');\n   \n    navigation.navigate('상품 추가', {prodTit: productTit.replace(/\\s/g,'').replace(data,''), imgUrl: imageUrl, barcode: data});\n    }\n   catch(error){\n    alert(error)\n  }\n}\n  useEffect(() => {\n    (async () => {\n      const { status } = await BarCodeScanner.requestPermissionsAsync();\n      setHasPermission(status === 'granted');\n    })();\n  }, []);\n\n  const handleBarCodeScanned = ({data}) => {\n    setScanned(true);\n    crawling(data);\n\n    // setModalVisible(true);\n  };\n\n  if (hasPermission === null) {\n    return <Text>카메라 권한이 없습니다.</Text>;\n  }\n  if (hasPermission === false) {\n    return <Text>카메라에 접근할 수 없습니다.</Text>;\n  }\n\n  return (\n    <View\n      style={{\n        flex: 1,\n        flexDirection: 'column',\n        justifyContent: 'flex-end',\n      }}>\n      <StatusBar barStyle=\"light-content\" backgroundColor=\"#000\" />\n      <BarCodeScanner\n        onBarCodeScanned={handleBarCodeScanned}\n        onBarCodeScanned={scanned ? undefined : handleBarCodeScanned}\n        style={styles.Scanner}\n      />\n      <View style={styles.shape}>\n        <Icon name=\"ios-qr-scanner\" style={{ position: 'absolute',fontSize:30, color: '#ffd700',}}/>\n        <Icon name=\"ios-barcode\" style={{ position: 'absolute', fontSize:20, color: '#ffd700',}}/>\n        <View style={styles.centeredView}>\n          {/* <Modal animationType=\"slide\" transparent={true} visible={modalVisible} onRequestClose={() => { Alert.alert(\"Modal has been closed.\");}}> \n          <View style={styles.centeredView}>\n            <View style={styles.modalView}>\n              <Text style={styles.modalText}>Hello World!</Text>\n              <TouchableHighlight style={{ ...styles.openButton, backgroundColor: \"#2196F3\" }} onPress={() => { setModalVisible(!modalVisible);}}>\n              <Text>Hide Modal</Text>\n              </TouchableHighlight>\n            </View>\n          </View>\n          </Modal> */}\n        </View>\n      {scanned && <Button title={'Tap to Scan Again'} onPress={() => setScanned(false)} />}\n      </View>\n    </View>\n  );\n  }\n\nexport default ScanScreen;\n\nconst styles = StyleSheet.create({\n  Scanner:{\n    position: 'absolute',\n    left: 0,\n    right: 0,\n    top: 0,\n    bottom: 0,\n    zIndex: 1,\n  },\n  shape:{\n    flex: 1,\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    zIndex: 2,\n  },\n  modalText: {\n    marginBottom: 15,\n    textAlign: \"center\"\n  },\n  modalView: {\n    margin: 20,\n    backgroundColor: \"white\",\n    borderRadius: 20,\n    padding: 35,\n    alignItems: \"center\",\n    shadowColor: \"#000\",\n    shadowOffset: {\n      width: 0,\n      height: 2\n    }\n  },\n    centeredView: {\n      flex: 1,\n      justifyContent: \"center\",\n      alignItems: \"center\",\n      marginTop: 22\n    },\n\n});"]},"metadata":{},"sourceType":"module"}