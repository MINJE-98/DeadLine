{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport * as api from \"../../api/Api\";\nvar SET_DEADLINE = \"SET_DEADLINE\";\n\nvar set_deadline = function set_deadline(token, teamuid, goodsid, date) {\n  return function _callee(dispatch) {\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(api.set_deladine(token, teamuid, goodsid, date));\n\n          case 3:\n            dispatch({\n              type: SET_DEADLINE\n            });\n            _context.next = 9;\n            break;\n\n          case 6:\n            _context.prev = 6;\n            _context.t0 = _context[\"catch\"](0);\n\n            if (_context.t0.response) {\n              if (_context.t0.response.status === 404) {\n                console.log(_context.t0.response);\n              } else {\n                console.log(_context.t0.response);\n              }\n            } else if (_context.t0.request) {\n              Alert.alert(\"통신을 실패\", \"통신 실패하였습니다.\");\n            } else {\n              console.log(\"Error\", _context.t0.message);\n            }\n\n          case 9:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[0, 6]], Promise);\n  };\n};\n\nexport { SET_DEADLINE, set_deadline };","map":{"version":3,"sources":["/Users/minje/Desktop/DeadLine-client/src/redux/actions/DeadlineAction.js"],"names":["api","SET_DEADLINE","set_deadline","token","teamuid","goodsid","date","dispatch","set_deladine","type","response","status","console","log","request","Alert","alert","message"],"mappings":";AAAA,OAAO,KAAKA,GAAZ;AAGA,IAAMC,YAAY,GAAG,cAArB;;AAEA,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAACC,KAAD,EAAQC,OAAR,EAAiBC,OAAjB,EAA0BC,IAA1B,EAAmC;AACtD,SAAO,iBAAOC,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CAEGP,GAAG,CAACQ,YAAJ,CAAiBL,KAAjB,EAAwBC,OAAxB,EAAiCC,OAAjC,EAA0CC,IAA1C,CAFH;;AAAA;AAGHC,YAAAA,QAAQ,CAAC;AAAEE,cAAAA,IAAI,EAAER;AAAR,aAAD,CAAR;AAHG;AAAA;;AAAA;AAAA;AAAA;;AAKH,gBAAI,YAAMS,QAAV,EAAoB;AAElB,kBAAI,YAAMA,QAAN,CAAeC,MAAf,KAA0B,GAA9B,EAAmC;AACjCC,gBAAAA,OAAO,CAACC,GAAR,CAAY,YAAMH,QAAlB;AACD,eAFD,MAEO;AACLE,gBAAAA,OAAO,CAACC,GAAR,CAAY,YAAMH,QAAlB;AACD;AACF,aAPD,MAOO,IAAI,YAAMI,OAAV,EAAmB;AAExBC,cAAAA,KAAK,CAACC,KAAN,CAAY,QAAZ,EAAsB,aAAtB;AACD,aAHM,MAGA;AAELJ,cAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqB,YAAMI,OAA3B;AACD;;AAlBE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAP;AAqBD,CAtBD;;AAwBA,SAAShB,YAAT,EAAuBC,YAAvB","sourcesContent":["import * as api from \"../../api/Api\";\n\n// 엑션 타입입니다.\nconst SET_DEADLINE = \"SET_DEADLINE\";\n\nconst set_deadline = (token, teamuid, goodsid, date) => {\n  return async (dispatch) => {\n    try {\n      await api.set_deladine(token, teamuid, goodsid, date);\n      dispatch({ type: SET_DEADLINE });\n    } catch (error) {\n      if (error.response) {\n        // 요청이 이루어졌으며 서버가 2xx의 범위를 벗어나는 상태 코드로 응답했습니다.\n        if (error.response.status === 404) {\n          console.log(error.response);\n        } else {\n          console.log(error.response);\n        }\n      } else if (error.request) {\n        // 요청이 이루어 졌으나 응답을 받지 못했습니다.\n        Alert.alert(\"통신을 실패\", \"통신 실패하였습니다.\");\n      } else {\n        // 오류를 발생시킨 요청을 설정하는 중에 문제가 발생했습니다.\n        console.log(\"Error\", error.message);\n      }\n    }\n  };\n};\n\nexport { SET_DEADLINE, set_deadline };\n"]},"metadata":{},"sourceType":"module"}