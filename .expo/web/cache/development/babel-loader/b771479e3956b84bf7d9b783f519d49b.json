{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport * as Facebook from \"expo-facebook\";\nimport FacebookInit from \"../../config/FacebookConfig\";\nimport * as api from \"../../api/Api\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nvar SET_TOKEN = \"SET_TOKEN\";\nvar REMOVE_TOKEN = \"REMOVE_TOKEN\";\n\nvar set_token = function set_token() {\n  return function _callee(dispatch) {\n    var _await$Facebook$logIn, type, token, result;\n\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(FacebookInit);\n\n          case 3:\n            _context.next = 5;\n            return _regeneratorRuntime.awrap(Facebook.logInWithReadPermissionsAsync({\n              permissions: [\"public_profile\", \"email\"]\n            }));\n\n          case 5:\n            _await$Facebook$logIn = _context.sent;\n            type = _await$Facebook$logIn.type;\n            token = _await$Facebook$logIn.token;\n\n            if (!(type === \"success\")) {\n              _context.next = 18;\n              break;\n            }\n\n            _context.next = 11;\n            return _regeneratorRuntime.awrap(api.get_user(token));\n\n          case 11:\n            result = _context.sent;\n            console.log(\"#########유저 등록###########\");\n            console.log(result);\n\n            if (!(result.data.data == null)) {\n              _context.next = 17;\n              break;\n            }\n\n            _context.next = 17;\n            return _regeneratorRuntime.awrap(api.set_user(token));\n\n          case 17:\n            dispatch({\n              type: SET_TOKEN,\n              token: token\n            });\n\n          case 18:\n            _context.next = 23;\n            break;\n\n          case 20:\n            _context.prev = 20;\n            _context.t0 = _context[\"catch\"](0);\n\n            if (_context.t0.response) {\n              console.log(_context.t0.response);\n\n              if (_context.t0.response.status === 404) {\n                Alert.alert(\"404에러\", _context.t0.response.message);\n              } else {\n                Alert.alert(\"40*에러\", _context.t0.response.message);\n              }\n            } else if (_context.t0.request) {\n              Alert.alert(\"통신을 실패\", \"통신 실패하였습니다.\");\n            } else {\n              console.log(\"Error\", _context.t0.message);\n            }\n\n          case 23:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[0, 20]], Promise);\n  };\n};\n\nvar remove_token = function remove_token() {\n  return {\n    type: REMOVE_TOKEN\n  };\n};\n\nexport { SET_TOKEN, REMOVE_TOKEN, set_token, remove_token };","map":{"version":3,"sources":["/Users/minje/Desktop/DeadLine-client/src/redux/actions/AuthAction.js"],"names":["Facebook","FacebookInit","api","SET_TOKEN","REMOVE_TOKEN","set_token","dispatch","logInWithReadPermissionsAsync","permissions","type","token","get_user","result","console","log","data","set_user","response","status","Alert","alert","message","request","remove_token"],"mappings":";AAAA,OAAO,KAAKA,QAAZ,MAA0B,eAA1B;AACA,OAAOC,YAAP;AACA,OAAO,KAAKC,GAAZ;;AAIA,IAAMC,SAAS,GAAG,WAAlB;AACA,IAAMC,YAAY,GAAG,cAArB;;AASA,IAAMC,SAAS,GAAG,SAAZA,SAAY,GAAM;AACtB,SAAO,iBAAOC,QAAP;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CAEGL,YAFH;;AAAA;AAAA;AAAA,6CAI2BD,QAAQ,CAACO,6BAAT,CAAuC;AACnEC,cAAAA,WAAW,EAAE,CAAC,gBAAD,EAAmB,OAAnB;AADsD,aAAvC,CAJ3B;;AAAA;AAAA;AAIKC,YAAAA,IAJL,yBAIKA,IAJL;AAIWC,YAAAA,KAJX,yBAIWA,KAJX;;AAAA,kBAOCD,IAAI,KAAK,SAPV;AAAA;AAAA;AAAA;;AAAA;AAAA,6CASoBP,GAAG,CAACS,QAAJ,CAAaD,KAAb,CATpB;;AAAA;AASKE,YAAAA,MATL;AAUDC,YAAAA,OAAO,CAACC,GAAR,CAAY,2BAAZ;AACAD,YAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ;;AAXC,kBAaGA,MAAM,CAACG,IAAP,CAAYA,IAAZ,IAAoB,IAbvB;AAAA;AAAA;AAAA;;AAAA;AAAA,6CAamCb,GAAG,CAACc,QAAJ,CAAaN,KAAb,CAbnC;;AAAA;AAeDJ,YAAAA,QAAQ,CAAC;AACPG,cAAAA,IAAI,EAAEN,SADC;AAEPO,cAAAA,KAAK,EAAEA;AAFA,aAAD,CAAR;;AAfC;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAqBH,gBAAI,YAAMO,QAAV,EAAoB;AAClBJ,cAAAA,OAAO,CAACC,GAAR,CAAY,YAAMG,QAAlB;;AAEA,kBAAI,YAAMA,QAAN,CAAeC,MAAf,KAA0B,GAA9B,EAAmC;AACjCC,gBAAAA,KAAK,CAACC,KAAN,CAAY,OAAZ,EAAqB,YAAMH,QAAN,CAAeI,OAApC;AACD,eAFD,MAEO;AACLF,gBAAAA,KAAK,CAACC,KAAN,CAAY,OAAZ,EAAqB,YAAMH,QAAN,CAAeI,OAApC;AACD;AACF,aARD,MAQO,IAAI,YAAMC,OAAV,EAAmB;AAExBH,cAAAA,KAAK,CAACC,KAAN,CAAY,QAAZ,EAAsB,aAAtB;AACD,aAHM,MAGA;AAELP,cAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqB,YAAMO,OAA3B;AACD;;AAnCE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAP;AAsCD,CAvCD;;AA4CA,IAAME,YAAY,GAAG,SAAfA,YAAe;AAAA,SAAO;AAAEd,IAAAA,IAAI,EAAEL;AAAR,GAAP;AAAA,CAArB;;AAEA,SACED,SADF,EAEEC,YAFF,EAGEC,SAHF,EAIEkB,YAJF","sourcesContent":["import * as Facebook from \"expo-facebook\";\nimport FacebookInit from \"../../config/FacebookConfig\";\nimport * as api from \"../../api/Api\";\nimport { Alert } from \"react-native\";\n\n// 엑션 타입입니다.\nconst SET_TOKEN = \"SET_TOKEN\";\nconst REMOVE_TOKEN = \"REMOVE_TOKEN\";\n\n/**\n * 유저의 토큰 검증 후 로컬에 등록합니다.\n * 1. 페이스북으로 부터 토큰을 받아옵니다.\n * 2. api서버에 유저가 등록되어 있는지 확인합니다.\n * 3. api서버에 유저가 등록되어 있지않다면, 유저를 등록합니다.\n * 4. token을 스토어에 저장하는 action을 작성합니다.\n */\nconst set_token = () => {\n  return async (dispatch) => {\n    try {\n      await FacebookInit;\n      // 1. 페이스북으로 부터 토큰을 받아옵니다.\n      const { type, token } = await Facebook.logInWithReadPermissionsAsync({\n        permissions: [\"public_profile\", \"email\"],\n      });\n      if (type === \"success\") {\n        // 2. api서버에 유저가 등록되어 있는지 확인합니다.\n        const result = await api.get_user(token);\n        console.log(\"#########유저 등록###########\");\n        console.log(result);\n        // 3. api서버에 유저가 등록되어 있지않다면, 유저를 등록합니다.\n        if (result.data.data == null) await api.set_user(token);\n        // 4. token을 스토어에 저장하는 action을 작성합니다.\n        dispatch({\n          type: SET_TOKEN,\n          token: token,\n        });\n      }\n    } catch (error) {\n      if (error.response) {\n        console.log(error.response);\n        // 요청이 이루어졌으며 서버가 2xx의 범위를 벗어나는 상태 코드로 응답했습니다.\n        if (error.response.status === 404) {\n          Alert.alert(\"404에러\", error.response.message);\n        } else {\n          Alert.alert(\"40*에러\", error.response.message);\n        }\n      } else if (error.request) {\n        // 요청이 이루어 졌으나 응답을 받지 못했습니다.\n        Alert.alert(\"통신을 실패\", \"통신 실패하였습니다.\");\n      } else {\n        // 오류를 발생시킨 요청을 설정하는 중에 문제가 발생했습니다.\n        console.log(\"Error\", error.message);\n      }\n    }\n  };\n};\n\n/**\n * 유저의 토큰을 로컬에서 제거합니다.\n */\nconst remove_token = () => ({ type: REMOVE_TOKEN });\n\nexport { \n  SET_TOKEN, \n  REMOVE_TOKEN, \n  set_token, \n  remove_token };\n"]},"metadata":{},"sourceType":"module"}