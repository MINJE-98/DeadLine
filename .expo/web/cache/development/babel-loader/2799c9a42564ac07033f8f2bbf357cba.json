{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/Users/minje/Desktop/DeadLine-client/src/navigation/auth/AuthNavigation.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport { createStackNavigator } from '@react-navigation/stack';\nimport AuthScreen from \"../../containers/auth/AuthScreen\";\nvar Stack = createStackNavigator();\n\nvar RootNavigation = function (_Component) {\n  _inherits(RootNavigation, _Component);\n\n  var _super = _createSuper(RootNavigation);\n\n  function RootNavigation() {\n    _classCallCheck(this, RootNavigation);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(RootNavigation, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {}\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(Stack.Navigator, {\n        screenOptions: {\n          headerShown: false\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 9\n        }\n      }, React.createElement(Stack.Screen, {\n        name: \"Auth\",\n        component: AuthScreen,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 13\n        }\n      }));\n    }\n  }]);\n\n  return RootNavigation;\n}(Component);\n\nexport { RootNavigation as default };","map":{"version":3,"sources":["/Users/minje/Desktop/DeadLine-client/src/navigation/auth/AuthNavigation.js"],"names":["React","Component","createStackNavigator","AuthScreen","Stack","RootNavigation","headerShown"],"mappings":";;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,oBAAT,QAAqC,yBAArC;AAKA,OAAOC,UAAP;AAqBA,IAAMC,KAAK,GAAGF,oBAAoB,EAAlC;;IACqBG,c;;;;;;;;;;;;;WAEf,6BAAmB,CAGlB;;;WACH,kBAAQ;AACJ,aACA,oBAAC,KAAD,CAAO,SAAP;AAAiB,QAAA,aAAa,EAAE;AAACC,UAAAA,WAAW,EAAE;AAAd,SAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,KAAD,CAAO,MAAP;AAAc,QAAA,IAAI,EAAC,MAAnB;AAA0B,QAAA,SAAS,EAAEH,UAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,CADA;AAWH;;;;EAlBuCF,S;;SAAvBI,c","sourcesContent":["import React, { Component } from 'react';\nimport { createStackNavigator } from '@react-navigation/stack';\n\n// import { connect } from 'react-redux';\n\n// import { AuthAsync } from '../utilities/FacebookLoginFunc'\nimport AuthScreen from  '../../containers/auth/AuthScreen';\n// import HomeModal from '../../navigations/Home.modal';\n// import TeaminfoNavigator from '../../navigations/Teaminfo.navigator';\n\n\n/**\n * 앱 네비게이터입니다.\n * 앱 네비게이터는 최상위 네비게이터 입니다.\n * \n * redux의 상태에 따라 로그인, 로그아웃을 결정합니다.\n * \n * 자식 : \n * SignInScreen\n * ModalNavigator\n * TeaminfoNavigator\n */\n\n//스크린을 islogin store에 연결해줍니다.\n// const Signin  = connect(state => ({ islogin: state.islogin }))(AuthScreen);\n// const Home  = connect(state => ({ islogin: state.islogin }))(HomeModal);\n\nconst Stack = createStackNavigator();\nexport default class RootNavigation extends Component{\n        \n      componentDidMount(){\n        // 유저의 로그인 상태를 확인을 합니다.\n        // AuthAsync(this.props);\n      }\n    render(){\n        return(\n        <Stack.Navigator screenOptions={{headerShown: false}}>\n            <Stack.Screen name=\"Auth\" component={AuthScreen}/>\n            {/* {\n                this.props.islogin == 'login'\n                ? <Stack.Screen name=\"Home\" component={Home} />\n                : <Stack.Screen name=\"Auth\" component={Signin}/>\n            } */}\n            {/* <Stack.Screen name=\"teaminfoNavigator\" component={TeaminfoNavigator}/> */}\n            </Stack.Navigator>\n        )\n    }\n}"]},"metadata":{},"sourceType":"module"}